#---------------------------------------------------------
# GLOBAL
#---------------------------------------------------------
import win32com.client
from win32com.client import Dispatch
from win32com.client.dynamic import Dispatch as dynDispatch

from win32com.client import constants

import math
import datetime

App = Dispatch("XSI.Application").Application

class Delaunay:
	def __init__(self, inpoints):
		"Constructor: gets a set of locators and create the appropriate attributes from it"

		#save coordinates of locators
		self.points = [Pnt.Kinematics.Global.Transform.Translation.Get2() for Pnt in Pnts]
		self.nbPoints = len(self.points)
		
		#out mesh data
		self.vertices = []
		self.polygons = []
		
		#feedback:
		App.LogMessage( "New instance of the DelaunayMath class created.")
		App.LogMessage( str(self.nbPoints)+" points.")
	
	def Triangulate(self, outType="curves", timer=0):
		"Makes all calculation. You can specify the output type (curves or faces)"
		App.LogMessage("Triangulate Called...")
		
		#check if you want to display time consumed for the operation:
		if timer: currTime = datetime.datetime.now()
		
		#create an empty triangle list
		triangles = []
		#and en empty list to store vertexes in order
		point = []
		
		##we need to start with a supertriangle which encompasses all the points
		##this is done by getting the minimum and maximum bounds of all points
		##and by adding a triangle to the triangles list which is a tad bigger than this bounds
		#copy the vertices list
		pts = self.points
		point.extend(pts)
		
		#make a series of operations to find minimum and maximum x and y values
		xmin = pts[0][0]
		ymin = pts[0][1]
		zmin = pts[0][2]
		xmax = xmin
		ymax = ymin
		zmax = zmin
		for i in range(self.nbPoints):
			if pts[i][0] < xmin: xmin = pts[i][0]
			if pts[i][0] > xmax: xmax = pts[i][0]
			if pts[i][1] < ymin: ymin = pts[i][1]
			if pts[i][1] > ymax: ymax = pts[i][1]
			if pts[i][2] < zmin: zmin = pts[i][2]
			if pts[i][2] > zmax: zmax = pts[i][2] 
		#get min and max distances
		dx = xmax-xmin
		dy = ymax-ymin
		dz = zmax-zmin
		if dx > dz:
			dmax = dx
		else:
			dmax = dz
		#get mid points of these distances
		xmid = (xmax+xmin)/2
		ymid = (ymax+ymin)/2
		zmid = (zmax+zmin)/2
		
		#calculate the coordinates of the vertices of the supertriangle
		#and add them to the end of the vertex list
		#and add this triangle to the triangles list (it is the first)
		v1x = xmid - 2*dmax
		v1y = ymid - dmax
		v1z = zmid - dmax
		point.append([v1x, 0,v1z])
		v2x = xmid
		v2y = ymid + 2*dmax
		v2z = zmid + 2*dmax
		point.append([v2x, 0,v2z])
		v3x = xmid + 2*dmax
		v3z = zmid - dmax
		point.append([v3x, 0,v3z])		
		triangles.append([self.nbPoints,self.nbPoints+1,self.nbPoints+2])
		
		##having already one triangle in the triangles list, we can start adding points
		##and re-triangulate everytime we need
		
		#Include each point one at a time into the existing triangulations
		for i in range(len(point)):
			#if i is more than the original number of points, stop loop 
			#cos then it is a vertex of the supertriangle, and we don't need to calculate them
			if i >= self.nbPoints: break
			#get current point i coordinates
			p = point[i]
			#Set up the edge buffer.
			#If the point (x,y) lies inside the circumcircle formed by each triangle, 
			#then the three edges of that triangle are added to the edge buffer.
			edges = []
			
			#create a copy of the triangles list to loop through
			tCopy = []
			tCopy.extend(triangles)
			#loop through the triangles to check the points
			for t in tCopy:
				#if the triangle is composed by the vertex in question (i), skip
				if i in t: continue
				#convert the triangle vertices to a list of coordinates
				tri=[ [point[k][0], point[k][2]] for k in t ]
				#check if the point i is in the circle formed by this triangle
				ic = self.inCircle(point=[p[0], p[2]], triangle=tri)
				if ic:
					#in case ic == true:
					#store the edges in the edges list
					edges.append([t[0], t[1]])
					edges.append([t[1], t[2]])
					edges.append([t[2], t[0]])
					#remove triangle from triangle list
					triangles.remove(t)
			
			#delete all duplicate edges from the edge buffer
			#this leaves the edges of the enclosing polygon only
			edges = removeDuplicates(edges)

			#add to the triangle list all triangles formed between the point
			#and the edges of the enclosing polygon (from the edge buffer
			for j in range(len(edges)):
				v1 = edges[j][0]
				v2 = edges[j][1]
				v3 = i
				triangles.append([v1,v2,v3])
			
		#end loop for vertices
		
		###FINAL STEP
		#now draw the triangles defined in the triangels list
		cnt = 0
		
		for t in triangles:
			#check if this triangle does not belong to the supertriangle,
			#if it does, jump
			
			if t[0] > self.nbPoints-1 or t[1] > self.nbPoints-1 or t[2] > self.nbPoints-1: continue
			#get coordinates of the triangle t
			v1 = point[t[0]]
			v2 = point[t[1]]
			v3 = point[t[2]]
			#see if all coordinates contain the Z value, if not, add z=0
			if len(v1)==2: v1.append(0)
			if len(v2)==2: v2.append(0)
			if len(v3)==2: v3.append(0)
			
			#log the triangle
			App.LogMessage("Vertice A :"+str( v1))
			for i in range(len(v1)):
				self.vertices.append(v1[i])
			for i in range(len(v2)):
				self.vertices.append(v2[i])
			for i in range(len(v3)):
				self.vertices.append(v3[i])
			
			self.polygons.append(3)
			self.polygons.append(cnt)
			self.polygons.append(cnt+1)
			self.polygons.append(cnt+2)
			
			cnt += 3
			
		App.LogMessage(self.vertices)
		App.LogMessage(self.polygons)
		
		Terrain = App.ActiveSceneRoot.AddPolygonMesh(self.vertices,self.polygons,"Terrain")
		
		#feedback
		App.LogMessage( "Delaunay triangulations created successfully!")
		App.LogMessage( ">> %d points" % self.nbPoints)
		App.LogMessage( ">> %d triangles" % len(triangles))
		#check if you want to see time consumed
		if timer: 
			delta_t = datetime.datetime.now() - currTime 
			App.LogMessage(  ">> Time consumed: %s" % str(delta_t))
	
	def inCircle(self, point=[0,0], triangle=[[0,0],[0,0],[0,0]]):
		'''Series of calculations to check if a certain point lies inside lies inside the circumcircle
		made up by points in triangle (x1,y1) (x2,y2) (x3,y3)'''
		
		#Return TRUE if the point (xp,yp) 
		#The circumcircle centre is returned in (xc,yc) and the radius r
		#NOTE: A point on the edge is inside the circumcircle
		xp = point[0]
		yp = point[1]
		x1 = triangle[0][0]
		y1 = triangle[0][1]
		x2 = triangle[1][0]
		y2 = triangle[1][1]
		x3 = triangle[2][0]
		y3 = triangle[2][1]
		eps = 0.0001
		
		if math.fabs(y1-y2) < eps and math.fabs(y2-y3) < eps: return False
		
		if math.fabs(y2-y1) < eps:
			m2 = -(x3 - x2) / (y3 - y2)
			mx2 = (x2 + x3) / 2
			my2 = (y2 + y3) / 2
			xc = (x2 + x1) / 2
			yc = m2 * (xc - mx2) + my2
		elif math.fabs(y3-y2) < eps:
			m1 = -(x2 - x1) / (y2 - y1)
			mx1 = (x1 + x2) / 2
			my1 = (y1 + y2) / 2
			xc = (x3 + x2) / 2 
			yc = m1 * (xc - mx1) + my1
		else:
			m1 = -(x2 - x1) / (y2 - y1)
			m2 = -(x3 - x2) / (y3 - y2)
			mx1 = (x1 + x2) / 2
			mx2 = (x2 + x3) / 2
			my1 = (y1 + y2) / 2
			my2 = (y2 + y3) / 2
			xc = (m1 * mx1 - m2 * mx2 + my2 - my1) / (m1 - m2)
			yc = m1 * (xc - mx1) + my1
		#end if
		dx = x2 - xc
		dy = y2 - yc
		rsqr = dx * dx + dy * dy
		r = math.sqrt(rsqr)
		dx = xp - xc
		dy = yp - yc
		drsqr = dx * dx + dy * dy
		
		if drsqr <= rsqr: 
			return True
		else:
			return False
		
	def showAllNumbers(self):
		"Method to apply number on each vertex (for debugging only...)"
		for i in range(self.numPoints):
			txt = cmds.textCurves(text=str(i))
			cmds.scale(.5,.5,.5)
			cmds.move(self.vertices[i][0], self.vertices[i][1], self.vertices[i][2], txt)
	
def removeDuplicates(a):
	"Gets a list of lists and removes the duplicates"
	#first sort the sublists
	a = [sorted(i) for i in a]
	b = []
	for i in a:
		times = 0
		for j in a:
			if i==j: times +=1
		if times == 1: b.append(i)		
	return b
	
Pnts = App.Selection(0).Members
D = Delaunay(Pnts)
D.Triangulate("Faces",1)