#ifndef OGL_PRIMITIVES_H
#define OGL_PRIMITIVES_H

#ifndef linux
#define WIN32_LEAN_AND_MEAN
#include <windows.h> // Needed for OpenGL on windows
#endif

#define NFACE 6
#define NVERT 8
#define PI 3.1415926

static void DrawRectangle(float width, float height, float line_width)
{
	float x = width * 0.5f;
	float z = height * 0.5f;
	glBegin(GL_LINE_LOOP);
	glLineWidth(line_width);
	glVertex3f(-x, 0.0, -z);
	glVertex3f(x, 0.0, -z);
	glVertex3f(x, 0.0, z);
	glVertex3f(-x, 0.0, z);
	glEnd();
}

static void DrawRoundedRectangle(int x, int y, int w, int h, int radius)
{
	glBegin(GL_POLYGON);
	glVertex2i(x + radius, y);
	glVertex2i(x + w - radius, y);
	for (float i = (float)PI*1.5f; i < PI * 2; i += 0.1f)
		glVertex2f(x + w - radius + cos(i)*radius, y + radius + sin(i)*radius);
	glVertex2i(x + w, y + radius);
	glVertex2i(x + w, y + h - radius);
	for (float i = 0; i < (float)PI*0.5f; i += 0.1f)
		glVertex2f(x + w - radius + cos(i)*radius, y + h - radius + sin(i)*radius);
	glVertex2i(x + w - radius, y + h);
	glVertex2i(x + radius, y + h);
	for (float i = (float)PI*0.5f; i < PI; i += 0.1f)
		glVertex2f(x + radius + cos(i)*radius, y + h - radius + sin(i)*radius);
	glVertex2i(x, y + h - radius);
	glVertex2i(x, y + radius);
	for (float i = (float)PI; i < PI*1.5f; i += 0.1f)
		glVertex2f(x + radius + cos(i)*radius, y + radius + sin(i)*radius);
	glEnd();
}

static void DrawLinedRoundedRectangle(int x, int y, int w, int h, int radius, float line_width)
{
	glLineWidth((GLfloat)line_width);
	glBegin(GL_LINE_STRIP);
	for (float i = (float)PI; i <= 1.5f*PI; i += 0.1f)
		glVertex2f(radius*cos(i) + x + radius, radius*sin(i) + y + radius);
	for (float i = 1.5f*(float)PI; i <= 2 * PI; i += 0.1f)
		glVertex2f(radius*cos(i) + x + w - radius, radius*sin(i) + y + radius);
	for (float i = 0; i <= 0.5f*PI; i += 0.1f)
		glVertex2f(radius*cos(i) + x + w - radius, radius*sin(i) + y + h - radius);
	for (float i = 0.5f*(float)PI; i <= PI; i += 0.1f)
		glVertex2f(radius*cos(i) + x + radius, radius*sin(i) + y + h - radius);
	glVertex2i(x, y + radius);
	glEnd();
}

static void DrawCube(GLfloat size)
{

	typedef GLfloat point3[3];
	int numCubeVerts = 8;

	const point3 vertices[] = {
			{-size, -size, size},
			{size, -size, size},
			{size, size, size},
			{-size, size, size},
			{size, -size, -size},
			{-size, -size, -size},
			{-size, size, -size},
			{size, size, -size},
	};


	const GLuint indices[][3] = {
			{0, 1, 2},
			{0, 2, 3},
			{4, 5, 6},
			{4, 6, 7},
			{5, 0, 3},
			{5, 3, 6},
			{1, 4, 7},
			{1, 7, 2},
			{5, 4, 1},
			{5, 1, 0},
			{3, 2, 7},
			{3, 7, 6},
	};

	const point3 normals[] = {
			{-0.408248290463863f, -0.408248290463863f, 0.816496580927726f},
			{0.666666666666667f, -0.666666666666667f, 0.333333333333333f},
			{0.408248290463863f, 0.408248290463863f, 0.816496580927726f},
			{-0.666666666666667f, 0.666666666666667f, 0.333333333333333f},
			{0.408248290463863f, -0.408248290463863f, -0.816496580927726f},
			{-0.666666666666667f, -0.666666666666667f, -0.333333333333333f},
			{-0.408248290463863f, 0.408248290463863f, -0.816496580927726f},
			{0.666666666666667f, 0.666666666666667f, -0.333333333333333f},
	};

	glEnableClientState(GL_VERTEX_ARRAY);
	glEnableClientState(GL_NORMAL_ARRAY);
	glVertexPointer(3, GL_FLOAT, 0, vertices);
	glNormalPointer(GL_FLOAT, 0, normals);
	glDrawElements(GL_TRIANGLES, 36, GL_UNSIGNED_INT, indices);
	glDisableClientState(GL_VERTEX_ARRAY);
	glDisableClientState(GL_NORMAL_ARRAY);

}

static void ConstructCircle(LONG in_segments, float in_r, std::vector<float> &out_points)
{
	out_points.resize(in_segments * 2);
	int i = 0;
	const float kRadianIncr = 6.28f / in_segments;
	for (i = 0; i < in_segments; i++)
	{
		float angleRadians = kRadianIncr * i;
		out_points[i * 2] = in_r * cosf(angleRadians);
		out_points[i * 2 + 1] = in_r * sinf(angleRadians);
	}
}

static void DrawCircle(GLfloat rad, LONG in_segments, bool smoothdraw)
{
	std::vector<float> circle;

	ConstructCircle(in_segments, rad, circle);
	if (smoothdraw) {
		glEnable(GL_LINE_SMOOTH);
	}
	glBegin(GL_LINE_LOOP);
	for (int i = 0; i < circle.size(); i += 2)
		glVertex3f(circle[i], 0, circle[i + 1]);
	glEnd();
	if (smoothdraw) {
		glDisable(GL_LINE_SMOOTH);
	}
}

static void DrawDisc(GLubyte colorCenter[4], GLubyte colorOuter[4], GLfloat rad, LONG in_segments, bool smoothdraw)
{
	std::vector<float> circle;

	ConstructCircle(in_segments, rad, circle);
	if (smoothdraw) {
		glEnable(GL_LINE_SMOOTH);
	}
	glBegin(GL_TRIANGLE_FAN);
	glColor4ub(colorCenter[0], colorCenter[1], colorCenter[2], colorCenter[3]);
	glVertex3f(0, 0, 0);
	glColor4ub(colorOuter[0], colorOuter[1], colorOuter[2], colorOuter[3]);
	for (int i = 0; i < circle.size(); i += 2)
		glVertex3f(circle[i], 0, circle[i + 1]);
	glVertex3f(circle[0], 0, circle[1]); //1st point
	glEnd();
	if (smoothdraw) {
		glDisable(GL_LINE_SMOOTH);
	}
}
static void DrawLine(float start[3], float end[3], bool smoothdraw)
{
	if (smoothdraw) {
		glEnable(GL_LINE_SMOOTH);
	}
	glBegin(GL_LINES);
	glVertex3f(start[0], start[1], start[2]);
	glVertex3f(end[0], end[1], end[2]);
	glEnd();
	if (smoothdraw) {
		glDisable(GL_LINE_SMOOTH);
	}
}
static void DrawLine(float sx, float sy, float sz, float ex, float ey, float ez, bool smoothdraw)
{
	if (smoothdraw) {
		glEnable(GL_LINE_SMOOTH);
	}
	glBegin(GL_LINES);
	glVertex3f(sx, sy, sz);
	glVertex3f(ex, ey, ez);
	glEnd();
	if (smoothdraw) {
		glDisable(GL_LINE_SMOOTH);
	}
}

/*
static void DrawDashedLine(CVector3& start, CVector3& end, float step,bool smoothdraw=false)
{
	CVector3 delta;
	delta.Sub(end,start);
	float len = (float)delta.GetLength();

	int nb = (int)(len/step);
	if(nb==0)nb=1;

	if(smoothdraw){
	glEnable(GL_LINE_SMOOTH); }
	glBegin(GL_LINES);

	for( int i=0;i<nb;i++){
		glVertex3d(start.GetX(),start.GetY(),start.GetZ());
		glVertex3d(end.GetX(),end.GetY(),end.GetZ());
	}

	glEnd();
	if(smoothdraw){
		glDisable(GL_LINE_SMOOTH);
	}
}
*/

static void DrawCone()
{
	GLuint coneNumVerts = 111;

	float coneVerts[] = {
		// # Hierarchy (from self to top father)
		-0.23492325, -0.05, -0.085505,
		-0.23492325, -0.05, -0.085505,
		-0.23492325, -0.05, -0.085505,
		// f 4//1 3//2 1//3 
		-0.23492325, -0.05, 0.085505,
		-0.25, -0.05, -1.38777878078145e-018,
		-1.38777878078145e-018, -0.05, -1.38777878078145e-018,
		// f 3//4 4//5 2//6 
		-0.25, -0.05, -1.38777878078145e-018,
		-0.23492325, -0.05, 0.085505,
		-1.38777878078145e-018, 0.95, -1.38777878078145e-018,
		// f 5//7 4//8 1//9 
		-0.191511, -0.05, 0.160697,
		-0.23492325, -0.05, 0.085505,
		-1.38777878078145e-018, -0.05, -1.38777878078145e-018,
		// f 4//10 5//11 2//12 
		-0.23492325, -0.05, 0.085505,
		-0.191511, -0.05, 0.160697,
		-1.38777878078145e-018, 0.95, -1.38777878078145e-018,
		// f 6//13 5//14 1//15 
		-0.125, -0.05, 0.21650625,
		-0.191511, -0.05, 0.160697,
		-1.38777878078145e-018, -0.05, -1.38777878078145e-018,
		// f 5//16 6//17 2//18 
		-0.191511, -0.05, 0.160697,
		-0.125, -0.05, 0.21650625,
		-1.38777878078145e-018, 0.95, -1.38777878078145e-018,
		// f 7//19 6//20 1//21 
		-0.043412, -0.05, 0.246202,
		-0.125, -0.05, 0.21650625,
		-1.38777878078145e-018, -0.05, -1.38777878078145e-018,
		// f 6//22 7//23 2//24 
		-0.125, -0.05, 0.21650625,
		-0.043412, -0.05, 0.246202,
		-1.38777878078145e-018, 0.95, -1.38777878078145e-018,
		// f 8//25 7//26 1//27 
		0.043412, -0.05, 0.246202,
		-0.043412, -0.05, 0.246202,
		-1.38777878078145e-018, -0.05, -1.38777878078145e-018,
		// f 7//28 8//29 2//30 
		-0.043412, -0.05, 0.246202,
		0.043412, -0.05, 0.246202,
		-1.38777878078145e-018, 0.95, -1.38777878078145e-018,
		// f 9//31 8//32 1//33 
		0.125, -0.05, 0.21650625,
		0.043412, -0.05, 0.246202,
		-1.38777878078145e-018, -0.05, -1.38777878078145e-018,
		// f 8//34 9//35 2//36 
		0.043412, -0.05, 0.246202,
		0.125, -0.05, 0.21650625,
		-1.38777878078145e-018, 0.95, -1.38777878078145e-018,
		// f 10//37 9//38 1//39 
		0.191511, -0.05, 0.160697,
		0.125, -0.05, 0.21650625,
		-1.38777878078145e-018, -0.05, -1.38777878078145e-018,
		// f 9//40 10//41 2//42 
		0.125, -0.05, 0.21650625,
		0.191511, -0.05, 0.160697,
		-1.38777878078145e-018, 0.95, -1.38777878078145e-018,
		// f 11//43 10//44 1//45 
		0.23492325, -0.05, 0.085505,
		0.191511, -0.05, 0.160697,
		-1.38777878078145e-018, -0.05, -1.38777878078145e-018,
		// f 10//46 11//47 2//48 
		0.191511, -0.05, 0.160697,
		0.23492325, -0.05, 0.085505,
		-1.38777878078145e-018, 0.95, -1.38777878078145e-018,
		// f 12//49 11//50 1//51 
		0.25, -0.05, -1.38777878078145e-018,
		0.23492325, -0.05, 0.085505,
		-1.38777878078145e-018, -0.05, -1.38777878078145e-018,
		// f 11//52 12//53 2//54 
		0.23492325, -0.05, 0.085505,
		0.25, -0.05, -1.38777878078145e-018,
		-1.38777878078145e-018, 0.95, -1.38777878078145e-018,
		// f 13//55 12//56 1//57 
		0.23492325, -0.05, -0.085505,
		0.25, -0.05, -1.38777878078145e-018,
		-1.38777878078145e-018, -0.05, -1.38777878078145e-018,
		// f 12//58 13//59 2//60 
		0.25, -0.05, -1.38777878078145e-018,
		0.23492325, -0.05, -0.085505,
		-1.38777878078145e-018, 0.95, -1.38777878078145e-018,
		// f 14//61 13//62 1//63 
		0.191511, -0.05, -0.160697,
		0.23492325, -0.05, -0.085505,
		-1.38777878078145e-018, -0.05, -1.38777878078145e-018,
		// f 13//64 14//65 2//66 
		0.23492325, -0.05, -0.085505,
		0.191511, -0.05, -0.160697,
		-1.38777878078145e-018, 0.95, -1.38777878078145e-018,
		// f 15//67 14//68 1//69 
		0.125, -0.05, -0.21650625,
		0.191511, -0.05, -0.160697,
		-1.38777878078145e-018, -0.05, -1.38777878078145e-018,
		// f 14//70 15//71 2//72 
		0.191511, -0.05, -0.160697,
		0.125, -0.05, -0.21650625,
		-1.38777878078145e-018, 0.95, -1.38777878078145e-018,
		// f 16//73 15//74 1//75 
		0.043412, -0.05, -0.246202,
		0.125, -0.05, -0.21650625,
		-1.38777878078145e-018, -0.05, -1.38777878078145e-018,
		// f 15//76 16//77 2//78 
		0.125, -0.05, -0.21650625,
		0.043412, -0.05, -0.246202,
		-1.38777878078145e-018, 0.95, -1.38777878078145e-018,
		// f 17//79 16//80 1//81 
		-0.043412, -0.05, -0.246202,
		0.043412, -0.05, -0.246202,
		-1.38777878078145e-018, -0.05, -1.38777878078145e-018,
		// f 16//82 17//83 2//84 
		0.043412, -0.05, -0.246202,
		-0.043412, -0.05, -0.246202,
		-1.38777878078145e-018, 0.95, -1.38777878078145e-018,
		// f 18//85 17//86 1//87 
		-0.125, -0.05, -0.21650625,
		-0.043412, -0.05, -0.246202,
		-1.38777878078145e-018, -0.05, -1.38777878078145e-018,
		// f 17//88 18//89 2//90 
		-0.043412, -0.05, -0.246202,
		-0.125, -0.05, -0.21650625,
		-1.38777878078145e-018, 0.95, -1.38777878078145e-018,
		// f 19//91 18//92 1//93 
		-0.191511, -0.05, -0.160697,
		-0.125, -0.05, -0.21650625,
		-1.38777878078145e-018, -0.05, -1.38777878078145e-018,
		// f 18//94 19//95 2//96 
		-0.125, -0.05, -0.21650625,
		-0.191511, -0.05, -0.160697,
		-1.38777878078145e-018, 0.95, -1.38777878078145e-018,
		// f 20//97 19//98 1//99 
		-0.23492325, -0.05, -0.085505,
		-0.191511, -0.05, -0.160697,
		-1.38777878078145e-018, -0.05, -1.38777878078145e-018,
		// f 19//100 20//101 2//102 
		-0.191511, -0.05, -0.160697,
		-0.23492325, -0.05, -0.085505,
		-1.38777878078145e-018, 0.95, -1.38777878078145e-018,
		// f 3//103 20//104 1//105 
		-0.25, -0.05, -1.38777878078145e-018,
		-0.23492325, -0.05, -0.085505,
		-1.38777878078145e-018, -0.05, -1.38777878078145e-018,
		// f 20//106 3//107 2//108 
		-0.23492325, -0.05, -0.085505,
		-0.25, -0.05, -1.38777878078145e-018,
		-1.38777878078145e-018, 0.95, -1.38777878078145e-018,
	};

	float coneNormals[] = {
		// # Hierarchy (from self to top father)
		0, 1, -0,
		0, 1, -0,
		0, 1, -0,
		// f 4//1 3//2 1//3 
		0, -1, 0,
		0, -1, 0,
		0, -1, 0,
		// f 3//4 4//5 2//6 
		-0.970142441321808, 0.242535860330308, 0,
		-0.911635791848047, 0.242535944622259, 0.331807924238969,
		0, 1, -0,
		// f 5//7 4//8 1//9 
		0, -1, 0,
		0, -1, 0,
		0, -1, 0,
		// f 4//10 5//11 2//12 
		-0.911635791848047, 0.242535944622259, 0.331807924238969,
		-0.74317188700221, 0.242535963122895, 0.623595905183497,
		0, 1, -0,
		// f 6//13 5//14 1//15 
		0, -1, 0,
		0, -1, 0,
		0, -1, 0,
		// f 5//16 6//17 2//18 
		-0.74317188700221, 0.242535963122895, 0.623595905183497,
		-0.485071035274124, 0.242536017637099, 0.840168061096604,
		0, 1, -0,
		// f 7//19 6//20 1//21 
		0, -1, 0,
		0, -1, 0,
		0, -1, 0,
		// f 6//22 7//23 2//24 
		-0.485071035274124, 0.242536017637099, 0.840168061096604,
		-0.168462974993274, 0.242535963997843, 0.955403858179384,
		0, 1, -0,
		// f 8//25 7//26 1//27 
		0, -1, 0,
		0, -1, 0,
		0, -1, 0,
		// f 7//28 8//29 2//30 
		-0.168462974993274, 0.242535963997843, 0.955403858179384,
		0.168462974993274, 0.242535963997843, 0.955403858179384,
		0, 1, -0,
		// f 9//31 8//32 1//33 
		0, -1, 0,
		0, -1, 0,
		0, -1, 0,
		// f 8//34 9//35 2//36 
		0.168462974993274, 0.242535963997843, 0.955403858179384,
		0.485071035274124, 0.242536017637099, 0.840168061096604,
		0, 1, -0,
		// f 10//37 9//38 1//39 
		0, -1, 0,
		0, -1, 0,
		0, -1, 0,
		// f 9//40 10//41 2//42 
		0.485071035274124, 0.242536017637099, 0.840168061096604,
		0.74317188700221, 0.242535963122895, 0.623595905183497,
		0, 1, -0,
		// f 11//43 10//44 1//45 
		0, -1, 0,
		0, -1, 0,
		0, -1, 0,
		// f 10//46 11//47 2//48 
		0.74317188700221, 0.242535963122895, 0.623595905183497,
		0.911635791848047, 0.242535944622259, 0.331807924238969,
		0, 1, -0,
		// f 12//49 11//50 1//51 
		0, -1, 0,
		0, -1, 0,
		0, -1, 0,
		// f 11//52 12//53 2//54 
		0.911635791848047, 0.242535944622259, 0.331807924238969,
		0.970142441321808, 0.242535860330308, 0,
		0, 1, -0,
		// f 13//55 12//56 1//57 
		0, -1, 0,
		0, -1, 0,
		0, -1, 0,
		// f 12//58 13//59 2//60 
		0.970142441321808, 0.242535860330308, 0,
		0.911635791848047, 0.242535944622259, -0.331807924238969,
		0, 1, -0,
		// f 14//61 13//62 1//63 
		0, -1, 0,
		0, -1, 0,
		0, -1, 0,
		// f 13//64 14//65 2//66 
		0.911635791848047, 0.242535944622259, -0.331807924238969,
		0.74317188700221, 0.242535963122895, -0.623595905183497,
		0, 1, -0,
		// f 15//67 14//68 1//69 
		0, -1, 0,
		0, -1, 0,
		0, -1, 0,
		// f 14//70 15//71 2//72 
		0.74317188700221, 0.242535963122895, -0.623595905183497,
		0.485071035274124, 0.242536017637099, -0.840168061096604,
		0, 1, -0,
		// f 16//73 15//74 1//75 
		0, -1, 0,
		0, -1, 0,
		0, -1, 0,
		// f 15//76 16//77 2//78 
		0.485071035274124, 0.242536017637099, -0.840168061096604,
		0.168462974993274, 0.242535963997843, -0.955403858179384,
		0, 1, -0,
		// f 17//79 16//80 1//81 
		0, -1, 0,
		0, -1, 0,
		0, -1, 0,
		// f 16//82 17//83 2//84 
		0.168462974993274, 0.242535963997843, -0.955403858179384,
		-0.168462974993274, 0.242535963997843, -0.955403858179384,
		0, 1, -0,
		// f 18//85 17//86 1//87 
		0, -1, 0,
		0, -1, 0,
		0, -1, 0,
		// f 17//88 18//89 2//90 
		-0.168462974993274, 0.242535963997843, -0.955403858179384,
		-0.485071035274124, 0.242536017637099, -0.840168061096604,
		0, 1, -0,
		// f 19//91 18//92 1//93 
		0, -1, 0,
		0, -1, 0,
		0, -1, 0,
		// f 18//94 19//95 2//96 
		-0.485071035274124, 0.242536017637099, -0.840168061096604,
		-0.74317188700221, 0.242535963122895, -0.623595905183497,
		0, 1, -0,
		// f 20//97 19//98 1//99 
		0, -1, 0,
		0, -1, 0,
		0, -1, 0,
		// f 19//100 20//101 2//102 
		-0.74317188700221, 0.242535963122895, -0.623595905183497,
		-0.911635791848047, 0.242535944622259, -0.331807924238969,
		0, 1, -0,
		// f 3//103 20//104 1//105 
		0, -1, 0,
		0, -1, 0,
		0, -1, 0,
		// f 20//106 3//107 2//108 
		-0.911635791848047, 0.242535944622259, -0.331807924238969,
		-0.970142441321808, 0.242535860330308, 0,
		0, 1, -0,
	};


	glEnableClientState(GL_VERTEX_ARRAY);
	glEnableClientState(GL_NORMAL_ARRAY);

	glVertexPointer(3, GL_FLOAT, 0, coneVerts);
	glNormalPointer(GL_FLOAT, 0, coneNormals);

	glDrawArrays(GL_TRIANGLES, 0, coneNumVerts);

	glDisableClientState(GL_VERTEX_ARRAY);
	glDisableClientState(GL_NORMAL_ARRAY);


}
#endif